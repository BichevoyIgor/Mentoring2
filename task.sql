-- 1. Создание базы данных:
-- Напишите SQL-скрипт для создания небольшой базы данных, содержащей таблицы для хранения информации о студентах и их зачетках.
drop database university;
CREATE
DATABASE university;

begin;
create table gradebooks
(
    gradebook_no bigint generated by default as identity
        constraint gradebooks_pk
            primary key,
    issue_date   date not null
);

create table subjects
(
    id           integer generated by default as identity
        constraint subjects_pk
            primary key,
    subject_name varchar not null
);

create table students_groups
(
    group_name varchar not null,
    id         bigint generated by default as identity
        constraint students_groups_pk
            primary key
);

create table students
(
    id            bigint generated by default as identity
        constraint students_pk
            primary key,
    first_name    varchar not null,
    last_name     varchar not null,
    date_of_birth date    not null,
    grade_book_id bigint
        constraint students_gradebooks_fk
            references gradebooks
            on update cascade on delete set null,
    group_id      integer
        constraint students_students_groups_id_fk
            references students_groups
);

create table grades
(
    gradebook_id bigint  not null
        constraint grades_gradebooks_fk
            references gradebooks,
    subject_id   integer not null,
    grade        integer not null
);

create index grades_gradebook_id_idx
    on grades (gradebook_id);

-- 2. Заполнение данных:
-- Напишите скрипт для вставки нескольких записей в таблицы, созданные в предыдущем задании.

INSERT INTO public.students_groups (group_name)
VALUES ('03-КТ-31'),
       ('03-КТ-32'),
       ('03-КТ-33');

INSERT INTO public.subjects (subject_name)
VALUES ('алгебра'),
       ('физика'),
       ('информатика'),
       ('русский язык'),
       ('химия');

INSERT INTO gradebooks (issue_date)
values (CURRENT_DATE),
       (CURRENT_DATE),
       (CURRENT_DATE),
       (CURRENT_DATE),
       (CURRENT_DATE),
       (CURRENT_DATE),
       (CURRENT_DATE),
       (CURRENT_DATE),
       (CURRENT_DATE);

INSERT INTO students (first_name, last_name, date_of_birth, grade_book_id, group_id)
VALUES ('Igor', 'Bichevoy', '2025-01-01', 1, 1),
       ('Ivan', 'Proskurov', '2025-01-01', 2, 1),
       ('Mixa', 'Knopochcin', '2025-01-01', 3, 2),
       ('Egor', 'Pultovich', '2025-01-01', 4, 2),
       ('Anton', 'Paket', '2025-01-01', 5, 3),
       ('Fedor', 'Fedorfedot', '2025-01-01', 6, 3),
       ('Gena', 'Gengen', '2025-01-01', 7, 1),
       ('Vasia', 'Vasvas', '2025-01-01', 8, 2),
       ('Platon', 'Platonovich', '2025-01-01', 9, 3);

INSERT INTO grades (gradebook_id, subject_id, grade)
VALUES (1, 1, 5),
       (1, 2, 4),
       (2, 2, 3),
       (3, 1, 3),
       (4, 1, 2),
       (7, 4, 4),
       (6, 4, 4),
       (6, 4, 3),
       (6, 4, 5),
       (5, 2, 3);

COMMIT;

-- 3. Извлечение данных:
-- Создайте запрос, который выводит список всех студентов с указанием их среднего балла.
SELECT s.first_name, s.last_name, avg(grades.grade)
FROM students s
         LEFT JOIN grades ON s.grade_book_id = grades.gradebook_id
GROUP BY s.first_name, s.last_name;

-- 4. Обновление записей:
-- Напишите SQL-запрос, который изменяет фамилию определенного студента в таблице.
UPDATE students
SET last_name = 'NewFamily'
WHERE last_name = 'Bichevoy';

-- 5. Удаление записей:
-- Реализуйте запрос для удаления всех студентов, у которых средний балл ниже определенной отметки.
DELETE
FROM students
WHERE grade_book_id IN (SELECT gradebook_id
                        FROM grades
                        GROUP BY gradebook_id
                        HAVING avg(grade) < 4);

-- 6. Использование JOIN:
-- Напишите запрос для получения всех студентов и соответствующих предметов, которые они сдают, включая оценку.
SELECT st.first_name || ' ' || st.last_name AS fio, sub.subject_name AS subject, gr.grade
FROM students st
         LEFT JOIN grades gr ON st.grade_book_id = gr.gradebook_id
         LEFT JOIN subjects sub ON gr.subject_id = sub.id;

-- 7. Группировка и агрегатные функции:
-- Создайте запрос, который подсчитывает количество студентов в разных группах обучения.
SELECT sg.group_name, COUNT(students.id)
FROM students
         LEFT JOIN students_groups sg ON students.group_id = sg.id
GROUP BY sg.group_name;

-- 8. Фильтрация данных:
-- Реализуйте запрос для получения студентов, средний балл которых выше среднего по всей группе.
SELECT students.id, students.first_name, students.last_name
FROM students
         LEFT JOIN (SELECT st.group_id as group_id, avg(grade) AS avg
                    FROM students st
                        LEFT JOIN grades gr
                    ON gr.gradebook_id = st.grade_book_id
                    GROUP BY st.group_id) AS avg_by_group ON students.group_id = avg_by_group.group_id
WHERE students.group_id = avg_by_group.group_id
  AND (SELECT avg(grade) FROM grades g WHERE g.gradebook_id = students.grade_book_id) > avg_by_group.avg;

-- 9. Сортировка данных:
-- Напишите запрос, который выводит всех студентов, отсортированных по фамилии в алфавитном порядке.
SELECT s.id, s.first_name, s.last_name
from students s
ORDER BY s.last_name;

-- 10. Комбинирование данных:
-- Реализуйте запрос, который комбинирует результаты из двух таблиц, показывая студентов, которые не сдали ни один предмет.
SELECT s.id, s.first_name, s.last_name, grades.grade
FROM students s
         LEFT JOIN grades ON s.grade_book_id = grades.gradebook_id
WHERE grades.grade IS NULL;




